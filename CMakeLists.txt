cmake_minimum_required (VERSION 3.7)
cmake_policy(VERSION 3.7...3.20)

project (cfd3d)
set(CMAKE_CXX_STANDARD 17)

option(USE_CUDA "USE_CUDA" ON)
option(USE_OPENCL "USE_OPENCL" ON)
option(USE_MPI "USE_MPI" ON)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
#MESSAGE(STATUS "CMAKE_MODULE_PATH: " ${CMAKE_MODULE_PATH})

file(GLOB_RECURSE SOURCES src/*.cpp src/*.c)
file(GLOB_RECURSE CUDA_SOURCES src/*.cu)

include_directories(src)

if(MSVC)
    set(CMAKE_CXX_FLAGS "-W3 /EHsc")
elseif(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "-Wall")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "-Wall")
endif()

if(${USE_OPENCL})
    find_package(OpenCL QUIET)
endif()
if (NOT ${USE_OPENCL} OR NOT OpenCL_FOUND)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Opencl/CfdSolverOpencl.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Opencl/ClInterface.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Opencl/SorSolverOpencl.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Opencl/UvwOpencl.cpp)
endif()

if(${USE_MPI})
    find_package(MPI QUIET)
endif()
if (NOT ${USE_MPI} OR NOT MPI_FOUND)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Mpi/BoundaryValuesMpi.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Mpi/CfdSolverMpi.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Mpi/MpiHelpers.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Mpi/SorSolverMpi.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/CfdSolver/Mpi/UvwMpi.cpp)
endif()

if(${CMAKE_VERSION} VERSION_LESS "3.18.0")
    # https://cmake.org/cmake/help/git-stage/module/FindCUDA.html
    if(${USE_CUDA})
        find_package(CUDA QUIET)
    endif()
    if(${CUDA_FOUND})
        add_executable(cfd3d ${SOURCES} ${CUDA_SOURCES})
    else()
        add_executable(cfd3d ${SOURCES})
    endif()
else()
    # https://cmake.org/cmake/help/git-stage/module/FindCUDAToolkit.html
    if(${USE_CUDA} AND NOT (${CMAKE_GENERATOR} STREQUAL "MSYS Makefiles" OR ${CMAKE_GENERATOR} STREQUAL "MinGW Makefiles"))
        find_package(CUDAToolkit QUIET)
    endif()
    if(${CUDAToolkit_FOUND})
        add_executable(cfd3d ${SOURCES} ${CUDA_SOURCES})
    else()
        add_executable(cfd3d ${SOURCES})
    endif()
endif()

if(${CMAKE_VERSION} VERSION_LESS "3.18.0")
    # https://cmake.org/cmake/help/git-stage/module/FindCUDA.html
    if(${CUDA_FOUND})
        MESSAGE(STATUS "CUDA was found. Enabling CUDA support.")
        enable_language(CUDA)
        set_target_properties(cfd3d PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
        add_compile_definitions(USE_CUDA)
        target_link_libraries(cfd3d PRIVATE ${CUDA_CUBLAS_LIBRARIES} ${CUDA_cusolver_LIBRARY})
    elseif(NOT USE_CUDA)
        MESSAGE(WARNING "Warning: CUDA support was enabled, but CUDA was not found. Disabling CUDA support.")
    endif()
else()
    # https://cmake.org/cmake/help/git-stage/module/FindCUDAToolkit.html
    if(${CUDAToolkit_FOUND})
        MESSAGE(STATUS "CUDA was found. Enabling CUDA support.")
        enable_language(CUDA)
        MESSAGE(STATUS "CUDA toolkit version: " ${CUDAToolkit_VERSION})
        # https://en.wikipedia.org/wiki/CUDA
        # https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability
        if (${CUDAToolkit_VERSION} VERSION_GREATER_EQUAL "11.1")
            set_property(TARGET cfd3d PROPERTY CUDA_ARCHITECTURES 61 75 86)
        elseif (${CUDAToolkit_VERSION} VERSION_GREATER_EQUAL "10.0")
            set_property(TARGET cfd3d PROPERTY CUDA_ARCHITECTURES 61 75)
        else()
            set_property(TARGET cfd3d PROPERTY CUDA_ARCHITECTURES 61)
        endif()
        set_target_properties(cfd3d PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
        add_compile_definitions(USE_CUDA)
        target_link_libraries(cfd3d PRIVATE CUDA::cublas CUDA::cusolver)
    elseif(NOT USE_CUDA)
        MESSAGE(WARNING "Warning: CUDA support was enabled, but CUDA was not found. Disabling CUDA support.")
    endif()
endif()

if (${USE_OPENCL} AND OpenCL_FOUND)
    MESSAGE(STATUS "OpenCL was found. Enabling OpenCL support.")
    target_include_directories(cfd3d PRIVATE ${OpenCL_INCLUDE_DIRS})
    target_link_libraries(cfd3d PRIVATE ${OpenCL_LIBRARIES})
    target_compile_definitions(cfd3d PRIVATE USE_OPENCL)
elseif(${USE_OPENCL} AND NOT OpenCL_FOUND)
    MESSAGE(WARNING "Warning: OpenCL support was enabled, but OpenCL was not found. Disabling OpenCL support.")
endif()

if (${USE_MPI} AND MPI_FOUND)
    MESSAGE(STATUS "MPI was found. Enabling MPI support.")
    target_include_directories(cfd3d PRIVATE ${MPI_INCLUDE_PATH})
    target_link_libraries(cfd3d PRIVATE ${MPI_LIBRARIES})
    target_compile_definitions(cfd3d PRIVATE USE_MPI)
elseif(${USE_MPI} AND NOT MPI_FOUND)
    MESSAGE(WARNING "Warning: MPI support was enabled, but MPI was not found. Disabling MPI support.")
endif()

set(FPHSA_NAME_MISMATCHED TRUE)
find_package(glm REQUIRED)
if(VCPKG_TOOLCHAIN)
    find_package(netCDF CONFIG REQUIRED)
else()
    find_package(NetCDF REQUIRED)
endif()

target_include_directories(cfd3d PRIVATE ${GLM_INCLUDE_DIR})
if(VCPKG_TOOLCHAIN)
    target_link_libraries(cfd3d PRIVATE netCDF::netcdf)
else()
    target_link_libraries(cfd3d PRIVATE ${NETCDF_LIBRARIES})
    target_include_directories(cfd3d PRIVATE ${NETCDF_INCLUDE_DIR})
endif()

if (UNIX AND NOT APPLE)
    if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.1)
            target_link_libraries(cfd3d stdc++fs)
        endif()
    elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0)
            target_link_libraries(cfd3d c++fs)
        endif()
    endif()
endif()

# According to https://devblogs.microsoft.com/cppblog/improved-openmp-support-for-cpp-in-visual-studio/,
# support for LLVM OpenMP was added with Visual Studio 2019 version 16.9. According to
# https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170,
# both Visual Studio 2019 version 16.8 and 16.9 have _MSC_VER / MSVC_VERSION 1928, so we need to check
# for a minimum version 1929.
find_package(OpenMP REQUIRED)
if(MSVC)
    option(USE_MSVC_OPENMP_LLVM "Use LLVM OpenMP with MSVC (available since Visual Studio 2019 version 16.9)." ON)
    option(USE_MSVC_OPENMP_EXPERIMENTAL "Use experimental OpenMP with MSVC (available since Visual Studio 2019 version 16.9)." ON)

    if(${MSVC_VERSION} GREATER_EQUAL 1929 AND (USE_MSVC_OPENMP_LLVM OR USE_MSVC_OPENMP_EXPERIMENTAL))
        if(USE_MSVC_OPENMP_LLVM)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /openmp:llvm")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp:llvm")
        endif()
        if(USE_MSVC_OPENMP_EXPERIMENTAL)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /openmp:experimental")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp:experimental")
        endif()
        if(USE_MSVC_OPENMP_LLVM AND USE_MSVC_OPENMP_EXPERIMENTAL)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /w44005")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /w44005")
        endif()
    endif()
else()
    if(OPENMP_FOUND)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    endif()
endif()

install(
        TARGETS cfd3d
        RUNTIME DESTINATION bin
)
